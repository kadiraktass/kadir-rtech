#include "ros/ros.h"
#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit_msgs/DisplayTrajectory.h>




int main(int argc, char **argv)
{

ros::init(argc, argv, "planning_tutorial_node");
 
ros::NodeHandle n;

moveit::planning_interface::MoveGroup group("right_arm");
moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
moveit_msgs::DisplayTrajectory display_trajectory;
moveit::planning_interface::MoveGroup::Plan my_plan;
moveit::planning_interface::MoveGroup two_arms_group("arms");



geometry_msgs::Pose target_pose1;
target_pose1.orientation.w =1.0;
target_pose1.position.x =   0.28;
target_pose1.position.y =   -0.7;
target_pose1.position.z =   1.0;
group.setPoseTarget(target_pose1);


robot_state::RobotState start_state(*group.getCurrentState());
geometry_msgs::Pose start_pose2;
start_pose2.orientation.w = 1.0;
start_pose2.position.x = 0.55;
start_pose2.position.y = -0.05;
start_pose2.position.z = 0.8;
const robot_state::JointModelGroup *joint_model_group =
                start_state.getJointModelGroup(group.getName());
start_state.setFromIK(joint_model_group, start_pose2);
group.setStartState(start_state);


std::vector<geometry_msgs::Pose> waypoints;

geometry_msgs::Pose target_pose3 = start_pose2;
target_pose3.position.x += 0.2;
target_pose3.position.z += 0.2;
waypoints.push_back(target_pose3);  // up and out

target_pose3.position.y -= 0.2;
waypoints.push_back(target_pose3);  // left

target_pose3.position.z -= 0.2;
target_pose3.position.y += 0.2;
target_pose3.position.x -= 0.2;
waypoints.push_back(target_pose3);  // down and right (back to start)

moveit_msgs::RobotTrajectory trajectory;
double fraction = group.computeCartesianPath(waypoints,
                                             0.01,  // eef_step
                                             0.0,   // jump_threshold
                                             trajectory);

/* Sleep to give Rviz time to visualize the plan. */
//sleep(15.0);
//group.setPoseTarget(target_pose3);
//bool success = group.plan(my_plan);
//group.clearPathConstraints();

/////////////////////////////////////////////////////////////////////////////

moveit_msgs::CollisionObject collision_object;
collision_object.header.frame_id = group.getPlanningFrame();

/* The id of the object is used to identify it. */
collision_object.id = "box1";

/* Define a box to add to the world. */
shape_msgs::SolidPrimitive primitive;
primitive.type = primitive.BOX;
primitive.dimensions.resize(3);
primitive.dimensions[0] = 0.4;
primitive.dimensions[1] = 0.1;
primitive.dimensions[2] = 0.4;

/* A pose for the box (specified relative to frame_id) */
geometry_msgs::Pose box_pose;
box_pose.orientation.w = 1.0;
box_pose.position.x =  0.6;
box_pose.position.y = -0.4;
box_pose.position.z =  1.2;

collision_object.primitives.push_back(primitive);
collision_object.primitive_poses.push_back(box_pose);
collision_object.operation = collision_object.ADD;

std::vector<moveit_msgs::CollisionObject> collision_objects;
collision_objects.push_back(collision_object);

ROS_INFO("Add an object into the world");
planning_scene_interface.addCollisionObjects(collision_objects);

/* Sleep so we have time to see the object in RViz */
sleep(2.0);

group.setPlanningTime(10.0);

group.setStartState(*group.getCurrentState());
group.setPoseTarget(target_pose1);
bool success = group.plan(my_plan);

sleep(10.0);
group.attachObject(collision_object.id);
sleep(4.0);
group.detachObject(collision_object.id);
sleep(4.0);
std::vector<std::string> object_ids;
object_ids.push_back(collision_object.id);
planning_scene_interface.removeCollisionObjects(object_ids);
/* Sleep to give Rviz time to show the object is no longer there. */
sleep(4.0);

/////////////////////////////////////////////////////////////////////////////
moveit::planning_interface::MoveGroup two_arms_group("arms");

two_arms_group.setPoseTarget(target_pose1, "r_wrist_roll_link");

geometry_msgs::Pose target_pose2;
target_pose2.orientation.w = 1.0;
target_pose2.position.x = 0.7;
target_pose2.position.y = 0.15;
target_pose2.position.z = 1.0;

two_arms_group.setPoseTarget(target_pose2, "l_wrist_roll_link");
moveit::planning_interface::MoveGroup::Plan two_arms_plan;
two_arms_group.plan(two_arms_plan);
sleep(4.0);
  return 0;
}






//bool success = group.plan(my_plan);


//std::vector<double> group_variable_values;
//group.getCurrentState()->copyJointGroupPositions(group.getCurrentState()->getRobotModel()-//>getJointModelGroup(group.getName()), group_variable_values);
//group_variable_values[0] = -1.0;
//group.setJointValueTarget(group_variable_values);
//bool success = group.plan(my_plan);
/* Sleep to give Rviz time to visualize the plan. */
//sleep(5.0);


//moveit_msgs::OrientationConstraint ocm;
//ocm.link_name = "r_wrist_roll_link";
//ocm.header.frame_id = "base_link";
//ocm.orientation.w = 1.0;
//ocm.absolute_x_axis_tolerance = 0.1;
//ocm.absolute_y_axis_tolerance = 0.1;
//ocm.absolute_z_axis_tolerance = 0.1;
//ocm.weight = 1.0;

//moveit_msgs::Constraints test_constraints;
//test_constraints.orientation_constraints.push_back(ocm);
//group.setPathConstraints(test_constraints);




